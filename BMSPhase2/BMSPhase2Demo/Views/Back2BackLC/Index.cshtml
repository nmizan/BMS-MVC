@model PagedList.IPagedList<BMSPhase2Demo.Models.BACKTOBACKLC>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
@{
    ViewBag.Title = "LC";
}
<h3 style=" margin:0 auto; width:50%;"> Local LC Details List for Bonders</h3>
<div class="row">
    <div class="col-lg-12 text-center">

        @if (ViewBag.Message != null)
        {

            <p class="well text-warning"> Message: @ViewBag.Message </p>
        }

    </div>

</div>
@using (Html.BeginForm("Index", "Back2BackLC", FormMethod.Post))
{

    <table class="table table-striped table-bordered ">
        <tr>
            <th id="search-th">
                @Html.DisplayNameFor(model => model.FirstOrDefault().LCNUMBER):
            </th>
            <td id="search-td">
                @Html.TextBox("LCNo", ViewBag.CurrentFilterLC as string, new { @class = "form-control" })
            </td>

            <th id="search-th">
                From @Html.DisplayNameFor(model => model.FirstOrDefault().LCDATE):
            </th>
            <td id="search-td">
                @Html.TextBox("FromDate", ViewBag.CurrentFilterFrDate as string, new { @class = "form-control datepicker", @placeholder = "yyyy-mm-dd" })
            </td>
            <th id="search-th">
                To @Html.DisplayNameFor(model => model.FirstOrDefault().LCDATE):
            </th>
            <td id="search-td">
                @Html.TextBox("ToDate", ViewBag.CurrentFilterToDate as string, new { @class = "form-control datepicker", @placeholder = "yyyy-mm-dd" })
            </td>

        </tr>
        @if (!System.Web.HttpContext.Current.User.IsInRole("Bonder"))
        {
            <tr>
                <th id="search-th">
                    <span>Bonder</span>
                </th>
                <td id="search-td">
                    @Html.DropDownList("BONDERID", null, "-- Select Bonder --", new { @class = "form-control" })

                </td>
            </tr>
        }
    </table>

    <button type="submit" name="submit" class="btn btn-primary">Search</button>

}


<p>
    @Html.ActionLink("Create a New LC", "Create", "", new { @class = "action-link" })
</p>
@if ((short)ViewBag.resultofbonderID > 0)
{
    string names = BMSPhase2Demo.Utils.BonderInfoUtils.getBonderName((short)ViewBag.resultofbonderID);
    <p style="padding-left: 350px;" class="well text-success"> Result showing for Bonder: @names </p>
}

@{ List<bool> hasExbond = (List<bool>)ViewData["exbonds"];
}
<table class="table">
    <thead>
        <tr id="tr">
            <th id="th">
                @Html.DisplayNameFor(model => model.FirstOrDefault().BUYERSNAME)
                & <br />
                @Html.DisplayNameFor(model => model.FirstOrDefault().BUYERSADDRESS)
            </th>
            <th id="th">
                @Html.DisplayNameFor(model => model.FirstOrDefault().LCNUMBER)
                <br />
                @Html.DisplayNameFor(model => model.FirstOrDefault().LCDATE)
            </th>
            <th id="th">
                @Html.DisplayNameFor(model => model.FirstOrDefault().BANK.BANKNAME)
                & <br />
                @Html.DisplayNameFor(model => model.FirstOrDefault().BANKBRANCH.BRANCHNAME)
            </th>
            <th id="th">
                @Html.DisplayNameFor(model => model.FirstOrDefault().SHIPPINGDATE)
                & <br />
                @Html.DisplayNameFor(model => model.FirstOrDefault().CORRECTIONDATE)
            </th>
            <th id="th">
                @Html.DisplayNameFor(model => model.FirstOrDefault().PRODUCTQUANTITY)
                <br />
                @Html.DisplayNameFor(model => model.FirstOrDefault().QUANTITYUNIT)
            </th>
            <th id="th">
                @Html.DisplayNameFor(model => model.FirstOrDefault().LCUSEDPRICE)
                <br />
                @Html.DisplayNameFor(model => model.FirstOrDefault().PRICEUNIT)
            </th>
            <th id="th">
                @Html.DisplayNameFor(model => model.FirstOrDefault().MASTERLCNUMBER)
                & <br />
                @Html.DisplayNameFor(model => model.FirstOrDefault().MASTERLCCORRECTIONDATE)
            </th>
            <th id="th">
                @Html.DisplayNameFor(model => model.FirstOrDefault().UDNUMBER)
                & <br />
                @Html.DisplayNameFor(model => model.FirstOrDefault().UDDATE)
            </th>
            <th id="th">
                @Html.DisplayNameFor(model => model.FirstOrDefault().UDCORRECTIONDATE)
            </th>
            <th id="th">
                @Html.DisplayNameFor(model => model.FirstOrDefault().UDPRODUCTDETAIL)
            </th>
            <th id="th">
                @Html.DisplayNameFor(model => model.FirstOrDefault().BONDER.BONDERNAME)
            </th>
            <th id="th">
                @Html.DisplayName("Action")
            </th>
        </tr>
    </thead>

    @{int i = 0; string trgb = "#c1deef";}

    @foreach (var item in Model)
    {
        i++;
        if (i % 2 == 0) { trgb = "#e6ebee"; }
        else { trgb = "#c1deef"; }
        <tbody>
            <tr style="background: @trgb">
                <td id="td">
                    @Html.DisplayFor(modelItem => item.BUYERSNAME)
                    <br />
                    <br />
                    @Html.DisplayFor(modelItem => item.BUYERSADDRESS)
                </td>
                <td id="td">
                    @Html.DisplayFor(modelItem => item.LCNUMBER)
                    <br />
                    <br />
                    @Html.DisplayFor(modelItem => item.LCDATE)
                </td>
                <td id="td">
                    @Html.DisplayFor(modelItem => item.BANK.BANKNAME)
                    <br />
                    <br />
                    @Html.DisplayFor(modelItem => item.BANKBRANCH.BRANCHNAME)
                </td>
                <td id="td">
                    @Html.DisplayFor(modelItem => item.SHIPPINGDATE)
                    & <br />
                    @Html.DisplayFor(modelItem => item.CORRECTIONDATE)
                </td>
                <td id="td">
                    @Html.DisplayFor(modelItem => item.PRODUCTQUANTITY)
                    <br />
                    @Html.DisplayFor(modelItem => item.QUANTITYUNIT)
                </td>
                <td id="td">
                    @Html.DisplayFor(modelItem => item.LCUSEDPRICE)
                    <br />
                    @Html.DisplayFor(modelItem => item.PRICEUNIT)
                </td>
                <td id="td">
                    @Html.DisplayFor(modelItem => item.MASTERLCNUMBER)
                    <br />
                    <br />
                    @Html.DisplayFor(modelItem => item.MASTERLCCORRECTIONDATE)
                </td>
                <td id="td">
                    @Html.DisplayFor(modelItem => item.UDNUMBER)
                    <br />
                    <br />
                    @Html.DisplayFor(modelItem => item.UDDATE)
                </td>
                <td id="td">
                    @Html.DisplayFor(modelItem => item.UDCORRECTIONDATE)
                </td>
                <td id="td">
                    @Html.DisplayFor(modelItem => item.UDPRODUCTDETAIL)
                </td>
                <td id="td">
                    @Html.DisplayFor(modelItem => item.BONDER.BONDERNAME)
                </td>

                <td id="td">
                    @if (item.EXBONDBACKTOBACKs.Count() == 0)
                    {
                        <span>@Html.ActionLink("Edit", "Edit", new { id = item.ID }, new { @class = "action-link" }) |</span>
                    }
                    @Html.ActionLink("Details", "Details", new { id = item.ID }, new { @class = "action-link" }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.ID }, new { @class = "action-link" })

                    @if (item.EXBONDBACKTOBACKs.Count() > 0)
                    {
                        <span>| @Html.ActionLink("Exbond Details", "Details", "ExBond", new { id = item.EXBONDBACKTOBACKs[0].EXBONDID }, new { @class = "action-link" })</span>
                    }
                </td>
            </tr>
        </tbody>
    }

</table>
    Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

    @Html.PagedListPager(Model, page => Url.Action("Index",
                                                        new { page, currentFilterLC = ViewBag.CurrentFilterLC, currentFilterFrDate = ViewBag.CurrentFilterFrDate, currentFilterToDate = ViewBag.CurrentFilterToDate, filterBonderId = ViewBag.filterBonderId }))
